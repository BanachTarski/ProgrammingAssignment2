## The first function, makeCacheMatrix creates a special "matrix", which is really a list containing a function to
## set the values of the matrix
## get the values of the matrix
## set the values of the inverse matrix
## get the values of the inverse matrix

makeCacheMatrix <- function(x = matrix()) {
        s <- NULL
        set <- function(y) {
                x <<- y
                s <<- NULL
	}
        get <- function() x
        setsolution <- function(solution) s <<- solution
        getsolution <- function() s
        list(set = set, get = get,
                setsolution = setsolution,
                getsolution = getsolution)
}


## The following function calculates the inverse of the special "matrix" created with the above function. However, it first checks to see if the inverse has already been calculated. If so, it gets the inverse from the cache and skips the computation. Otherwise, it calculates the inverse of the data and sets the value of the inverse in the cache via the setsolution function.

cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
        s <- x$getsolution()
        if(!is.null(s)) {
                message("getting cached data")
                return(s)
        }
        data <- x$get()
        s <- solve(data, ...)
        x$setsolution(s)
        s
}
